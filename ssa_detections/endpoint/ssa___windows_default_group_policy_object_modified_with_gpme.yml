name: Windows Default Group Policy Object Modified with GPME
id: bcb55c13-067b-4648-98f3-627010f72520
version: 1
date: '2023-05-02'
author: Mauricio Velazco, Splunk
type: TTP
status: production
description: The following analytic identifies the potential edition of a default
  Group Policy Object. A fresh installation of an Active Directory network will typically
  contain two default group policy objects `Default Domain Controllers Policy` and
  `Default Domain Policy`. The default domain controllers policy is used to enforce
  and set policies to all the domain controllers within the domain environment. The
  default domain policy is linked to all users and computers by default. An adversary
  who has obtained privileged access to an Active Directory network may modify the
  default group policy objects to obtain further access, deploy persistence or execute
  malware across a large number of hosts. Security teams should monitor the edition
  of the default GPOs.
data_source:
- Windows Security 4688
search: ' | from read_ba_enriched_events() | eval timestamp = ucast(map_get(input_event,"time"),"long",
  null) | eval metadata = ucast(map_get(input_event, "metadata"),"map<string, any>",
  null) | eval metadata_uid = ucast(map_get(metadata, "uid"),"string", null) | eval
  process=ucast(map_get(input_event,"process"), "map<string, any>", null) | eval process_pid=ucast(map_get(process,"pid"),
  "string", null) | eval process_file=ucast(map_get(process,"file"), "map<string,
  any>", null) | eval process_file_path=ucast(map_get(process_file,"path"), "string",
  null) | eval process_file_name=ucast(map_get(process_file,"name"), "string", null)
  | eval process_cmd_line=ucast(map_get(process,"cmd_line"), "string", null) | eval
  actor=ucast(map_get(input_event,"actor"), "map<string, any>", null) | eval actor_user=ucast(map_get(actor,"user"),
  "map<string, any>", null) | eval actor_user_name=ucast(map_get(actor_user,"name"),
  "string", null) | eval actor_process=ucast(map_get(actor,"process"), "map<string,
  any>", null) | eval actor_process_pid=ucast(map_get(actor_process,"pid"), "string",
  null) | eval actor_process_file=ucast(map_get(actor_process,"file"), "map<string,
  any>", null) | eval actor_process_file_path=ucast(map_get(actor_process_file,"path"),
  "string", null) | eval actor_process_file_name=ucast(map_get(actor_process_file,"name"),
  "string", null) | eval device=ucast(map_get(input_event,"device"), "map<string,
  any>", null) | eval device_hostname=ucast(map_get(device,"hostname"), "string",
  null) | where (process_file_name="mmc.exe" AND like(process_cmd_line, "%gpme.msc%"))
  OR like(process_cmd_line, "%31B2F340-016D-11D2-945F-00C04FB984F9%") OR like(process_cmd_line,
  "%6AC1786C-016F-11D2-945F-00C04fB984F9%") --finding_report--'
how_to_implement: To successfully implement this search, you need to be ingesting
  logs with the process name, parent process, and command-line executions from your
  endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the
  Sysmon TA.
known_false_positives: The default Group Policy Objects within an AD network may be
  legitimately updated for administrative operations, filter as needed.
references:
- https://attack.mitre.org/techniques/T1484/
- https://attack.mitre.org/techniques/T1484/001
- https://www.trustedsec.com/blog/weaponizing-group-policy-objects-access/
- https://adsecurity.org/?p=2716
- https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn265969(v=ws.11)
tags:
  analytic_story:
  - Active Directory Privilege Escalation
  asset_type: Endpoint
  confidence: 50
  impact: 100
  message: A default group policy object was opened with Group Policy Manage Editor
    on $dest$
  mitre_attack_id:
  - T1484
  - T1484.001
  observable:
  - name: process.pid
    type: Other
  - name: process.file.path
    type: File
  - name: process.file.name
    type: File
  - name: process.cmd_line
    type: Other
  - name: actor.user.name
    type: User Name
  - name: actor.process.pid
    type: Other
  - name: actor.process.file.path
    type: File Name
  - name: actor.process.file.name
    type: File Name
  - name: device.hostname
    type: Hostname
  product:
  - Splunk Behavioral Analytics
  required_fields:
  - process.pid
  - process.file.path
  - process.file.name
  - process.cmd_line
  - actor.user.name
  - actor.process.pid
  - actor.process.file.path
  - actor.process.file.name
  - device.hostname
  risk_score: 50
  security_domain: endpoint
  mappings:
  - ocsf: process.pid
    cim: process_id
  - ocsf: process.file.path
    cim: process_path
  - ocsf: process.file.name
    cim: process_name
  - ocsf: process.cmd_line
    cim: process
  - ocsf: actor.user.name
    cim: user
  - ocsf: actor.process.pid
    cim: parent_process_id
  - ocsf: actor.process.file.path
    cim: parent_process_path
  - ocsf: actor.process.file.name
    cim: parent_process_name
  - ocsf: device.hostname
    cim: dest
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1484.001/default_domain_policy_modified/security-4688.log
    source: XmlWinEventLog
