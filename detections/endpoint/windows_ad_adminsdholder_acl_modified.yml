name: Windows AD AdminSDHolder ACL Modified
id: 00d877c3-7b7b-443d-9562-6b231e2abab9
version: 1
date: '2022-11-15'
author: Mauricio Velazco, Dean Luxton, Splunk
type: TTP
status: production
data_source: 
- Windows Security 5136
description: The following analytic identifies the modification of the Access Control List for the AdminSDHolder object within a Windows domain. Specifically, the 
  detection triggers on the addition of a new rule to the existing ACL. AdminSDHolder is an object located in the System Partition in Active Directory and is used as a 
  security template for objects that are members of certain privileged groups. Objects in these groups are enumerated and any objects with security descriptors that dont 
  match the AdminSDHolder ACL are flagged for updating. The Security Descriptor propagator (SDProp) process runs every 60 minutes on the PDC Emulator and re-stamps the object
  Access Control List (ACL) with the security permissions set on the AdminSDHolder. An adversary who has obtained privileged access to a Windows Domain may modify the AdminSDHolder
  ACL to establish persistence and allow an unprivileged user to take control of a domain.
search: >-
  `wineventlog_security` EventCode=5136 ObjectClass=container ObjectDN="CN=AdminSDHolder,CN=System*" 
  | stats min(_time) as _time values(eval(if(OperationType=="%%14675",AttributeValue,null))) as old_value values(eval(if(OperationType=="%%14674",AttributeValue,null))) as new_value values(OperationType) as OperationType by ObjectClass ObjectDN OpCorrelationID src_user SubjectLogonId 
  | rex field=old_value max_match=10000 "\((?P<old_values>.*?)\)" 
  | rex field=new_value max_match=10000 "\((?P<new_ace>.*?)\)" 
  | mvexpand new_ace
  | where NOT new_ace IN (old_values) 
  | rex field=new_ace "(?P<aceType>.*?);(?P<aceFlags>.*?);(?P<aceAccessRights>.*?);(?P<aceObjectGuid>.*?);(?P<aceInheritedTypeGuid>.*?);(?P<aceSid>.*?)$"
  | rex max_match=100 field=aceAccessRights "(?P<AccessRights>[A-Z]{2})" 
  | rex max_match=100 field=aceFlags "(?P<aceFlags>[A-Z]{2})" 
  | lookup msad_guid_lookup.csv guid as aceObjectGuid OUTPUT displayName as ControlAccessRights
  | lookup ace_access_rights_lookup.csv access_rights_string as AccessRights OUTPUT access_rights_value 
  | lookup ace_type_lookup.csv ace_type_string as aceType OUTPUT ace_type_value 
  | lookup ace_flag_lookup.csv flag_string as aceFlags OUTPUT flag_value as ace_flag_value
  ``` Optional SID resolution lookups
  | lookup identity_lookup_expanded objectSid as aceSid OUTPUT downLevelDomainName as user 
  | lookup admon_groups_def objectSid as aceSid OUTPUT cn as group```
  | lookup builtin_groups_lookup.csv builtin_group_string  as aceSid OUTPUTNEW builtin_group_name as builtin_group
  | eval aceType=coalesce(ace_type_value,aceType), aceFlags=coalesce(ace_flag_value,"This object only"), aceAccessRights=if(aceAccessRights="CCDCLCSWRPWPDTLOCRSDRCWDWO","Full control",coalesce(access_rights_value,AccessRights)), aceControlAccessRights=coalesce(ControlAccessRights,aceObjectGuid), user=coalesce(user, group, builtin_group, aceSid)
  | stats min(_time) as _time values(aceType) as aceType values(aceFlags) as aceFlags(inheritance) values(aceControlAccessRights) as aceControlAccessRights values(aceAccessRights) as aceAccessRights values(new_ace) as new_ace values(SubjectLogonId) as SubjectLogonId by ObjectClass ObjectDN src_user user
  | eval aceControlAccessRights=if(mvcount(aceControlAccessRights)=1 AND aceControlAccessRights="","All rights",'aceControlAccessRights')
  | search NOT aceType IN (*denied*,D,OD,XD) AND aceAccessRights IN ("Full control","All extended rights","All validated writes","Create all child objects","Delete all child objects","Delete subtree","Delete","Modify permissions","Modify owner","Write all properties",CC,CR,DC,DT,SD,SW,WD,WO,WP)
  | `windows_ad_adminsdholder_acl_modified_filter`
how_to_implement: To successfully implement this search, you ned to be ingesting eventcode 
 `5136`. The Advanced Security Audit policy setting `Audit Directory Services Changes` 
 within `DS Access` needs to be enabled. Additionally, a SACL needs to be created for the AdminSDHolder object in order to log modifications.
known_false_positives: Adding new users or groups to the AdminSDHolder ACL is not usual. Filter as needed
references:
- https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/security-best-practices/appendix-c--protected-accounts-and-groups-in-active-directory
- https://social.technet.microsoft.com/wiki/contents/articles/22331.adminsdholder-protected-groups-and-security-descriptor-propagator.aspx
- https://adsecurity.org/?p=1906
- https://pentestlab.blog/2022/01/04/domain-persistence-adminsdholder/
- https://learn.microsoft.com/en-us/windows/security/threat-protection/auditing/event-5136
- https://learn.microsoft.com/en-us/windows/win32/secauthz/access-control-lists
- https://medium.com/@cryps1s/detecting-windows-endpoint-compromise-with-sacls-cd748e10950
- https://lantern.splunk.com/Security/Product_Tips/Enterprise_Security/Enabling_an_audit_trail_from_Active_Directory
tags:
  analytic_story:
  - Sneaky Active Directory Persistence Tricks
  asset_type: Endpoint
  confidence: 70
  impact: 80
  message: The AdminSDHolder domain object has been modified on $Computer$ by $SubjectUserName$
  mitre_attack_id:
  - T1546
  observable:
  - name: SubjectUserName
    type: User
    role:
    - Attacker
  - name: Computer
    type: Endpoint
    role:
    - Victim
  product:
  - Splunk Enterprise
  - Splunk Enterprise Security
  - Splunk Cloud
  required_fields:
  - _time
  - EventCode
  - AttributeLDAPDisplayName
  - OperationType
  - ObjectDN
  - Computer
  - SubjectUserName
  - AttributeValue
  risk_score: 56
  security_domain: endpoint
tests:
- name: True Positive Test
  attack_data:
  - data: https://media.githubusercontent.com/media/splunk/attack_data/master/datasets/attack_techniques/T1546/adminsdholder_modified/windows-security.log
    source: XmlWinEventLog:Security
    sourcetype: XmlWinEventLog